edition = "2023";

package thrippy.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/go_features.proto";
import "thrippy/v1/oauth.proto";

option go_package = "github.com/tzrikka/thrippy-api/go/thrippy/v1";
option features.(pb.go).api_level = API_OPAQUE;

service ThrippyService {
    rpc CreateLink(CreateLinkRequest) returns (CreateLinkResponse) {
        option (google.api.http) = {
            post: "/v1/links"
            body: "*"
        };
    }

    rpc GetLink(GetLinkRequest) returns (GetLinkResponse) {
        option (google.api.http) = {
            get: "/v1/links/{link_id}"
        };
    }

    rpc DeleteLink(DeleteLinkRequest) returns (DeleteLinkResponse) {
        option (google.api.http) = {
            delete: "/v1/links/{link_id}"
        };
    }

    rpc SetCredentials(SetCredentialsRequest) returns (SetCredentialsResponse) {
        option (google.api.http) = {
            put: "/v1/links/{link_id}/credentials"
            body: "*"
        };
    }

    rpc GetCredentials(GetCredentialsRequest) returns (GetCredentialsResponse) {
        option (google.api.http) = {
            get: "/v1/links/{link_id}/credentials"
        };
    }

    rpc DeleteCredentials(DeleteCredentialsRequest) returns (DeleteCredentialsResponse) {
        option (google.api.http) = {
            delete: "/v1/links/{link_id}/credentials"
        };
    }

    rpc SetMetadata(SetMetadataRequest) returns (SetMetadataResponse) {
        option (google.api.http) = {
            put: "/v1/links/{link_id}/metadata"
            body: "*"
        };
    }

    rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse) {
        option (google.api.http) = {
            get: "/v1/links/{link_id}/metadata"
        };
    }

    rpc DeleteMetadata(DeleteMetadataRequest) returns (DeleteMetadataResponse) {
        option (google.api.http) = {
            delete: "/v1/links/{link_id}/metadata"
        };
    }
}

message CreateLinkRequest {
    string template = 1 [(google.api.field_behavior) = REQUIRED];
    OAuthConfig oauth_config = 2 [lazy = true];
}

message CreateLinkResponse {
    string link_id = 1;
    repeated string credential_fields = 2;
}

message GetLinkRequest {
    string link_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetLinkResponse {
    string template = 1;
    OAuthConfig oauth_config = 2 [lazy = true];
    repeated string credential_fields = 3;
}

message DeleteLinkRequest {
    string link_id = 1 [(google.api.field_behavior) = REQUIRED];
    bool allow_missing = 2;
}

message DeleteLinkResponse {}

message SetCredentialsRequest {
    string link_id = 1 [(google.api.field_behavior) = REQUIRED];
    map<string, string> generic_creds = 2;
    OAuthToken token = 3;
}

message SetCredentialsResponse {}

message GetCredentialsRequest {
    string link_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetCredentialsResponse {
    map<string, string> credentials = 1;
}

message DeleteCredentialsRequest {
    string link_id = 1 [(google.api.field_behavior) = REQUIRED];
    bool allow_missing = 2;
}

message DeleteCredentialsResponse {}

message SetMetadataRequest {
    string link_id = 1 [(google.api.field_behavior) = REQUIRED];
    map<string, string> metadata = 2;
}

message SetMetadataResponse {}

message GetMetadataRequest {
    string link_id = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetMetadataResponse {
    map<string, string> metadata = 1;
}

message DeleteMetadataRequest {
    string link_id = 1;
    bool allow_missing = 2;
}

message DeleteMetadataResponse {}
